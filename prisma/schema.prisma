// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  comments      Comment[]
  commentLikes  CommentLike[]
  posts         Post[]     @relation("uploader")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy  String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Comment {
  id           String    @id @default(uuid())
  content      String
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId      String    // Reference to the video being commented on
  parentId     String?   // Null for parent comments, set for subcomments
  parent       Comment?  @relation("CommentToSubcomments", fields: [parentId], references: [id])
  subcomments  Comment[] @relation("CommentToSubcomments")
  likes        CommentLike[]
  post         Post      @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Post {
  id            String    @id @default(uuid())
  title         String
  description   String?
  cloudinaryUrl String    // The URL returned by Cloudinary
  publicId      String    // Cloudinary public_id for management
  thumbnailUrl  String?   // Optional: Cloudinary thumbnail or preview image
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  uploaderId    String
  uploader      User      @relation("uploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  game          String    // e.g., "Minecraft", "Apex Legends"
  comments      Comment[] // Relation to comments
  // Add more fields as needed (e.g., views, tags, etc.)
}
